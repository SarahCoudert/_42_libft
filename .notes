Setting up a little description of each required function.
===============================================================================

• memset
• bzero
• memcpy
• memccpy

DESCRIPTION
The memccpy() function copies bytes from string s2 to string s1.  If the
character c (as converted to an unsigned char) occurs in the string s2, the
copy
stops and a pointer to the byte after the copy of c in the string s1
is returned.  Otherwise, n bytes are copied, and a NULL pointer is
returned.

The source and destination strings should not overlap, as the
behavior is undefined.

• memmove
DESCRIPTION
The memmove() function copies n bytes from string s2 to string s1.  The two
strings may overlap; the copy is always done in a non-destructive manner.

RETURN VALUES
The memmove() function returns the original value of s1.

• memchr
DESCRIPTION
The memchr() function locates the first occurrence of c (converted to an
		unsigned char) in string s.

RETURN VALUES
The memchr() function returns a pointer to the byte located, or NULL
if no such byte exists within n bytes.

• memcmp
DESCRIPTION
The memcmp() function compares byte string s1 against byte string s2.  Both
strings are assumed to be n bytes long.

RETURN VALUES
The memcmp() function returns zero if the two strings are identical,
	otherwise returns the difference between the first two differing bytes
	(treated as
	 unsigned char values, so that `\200' is greater than `\0', for
	 example).  Zero-length strings are always identical.

	-------------------------------------------------------------------------------

	• strlen
	DESCRIPTION
The strlen() function computes the length of the string s.  The strnlen()
	function attempts to compute the length of s, but never scans beyond the
	first
	maxlen bytes of s.

	RETURN VALUES
	The strlen() function returns the number of characters that
	precede the terminating NUL character.  The strnlen() function
	returns either the same result as
	strlen() or maxlen, whichever is smaller.

	• strdup
	DESCRIPTION
	The strdup() function allocates sufficient memory for a copy of the string
	s1, does the copy, and returns a pointer to it.  The pointer may
	subsequently be
	used as an argument to the function free(3).

	If insufficient memory is available, NULL is returned and errno
	is set to ENOMEM.

	The strndup() function copies at most n characters from the
	string s1 always NUL terminating the copied string.

	• strcpy
	DESCRIPTION
	The stpcpy() and strcpy() functions copy the string s2 to s1 (including the
			terminating `\0' character).

	The stpncpy() and strncpy() functions copy at most n characters from
	s2 into s1.  If s2 is less than n characters long, the remainder of s1
	is filled with
	`\0' characters.  Otherwise, s1 is not terminated.

	The source and destination strings should not overlap, as
	the behavior is undefined.

	RETURN VALUES
	The strcpy() and strncpy() functions return s1.  The
	stpcpy() and stpncpy() functions return a pointer to
	the terminating `\0' character of s1.  If stpncpy()
	does not terminate s1 with a NUL character, it
	instead returns a pointer to s1[n] (which does not
			necessarily refer to a valid memory location.)

	• strncpy
	Voir ci dessus

	• strcat
	DESCRIPTION
	The strcat() and strncat() functions append a copy of the null-terminated
	string s2 to the end of the null-terminated string s1, then add a
	terminating `\0'.
	The string s1 must have sufficient space to hold the result.

	The strncat() function appends not more than n characters from
	s2, and then adds a terminating `\0'.

	The source and destination strings should not overlap, as
	the behavior is undefined.

	RETURN VALUES
	The strcat() and strncat() functions return the pointer
	s1.

	• strncat
	Voir ci dessus

	• strlcat
	DESCRIPTION
	The strlcpy() and strlcat() functions copy and concatenate strings
	respectively.  They are designed to be safer, more consistent, and less
	error prone
	replacements for strncpy(3) and strncat(3).  Unlike those functions,
	strlcpy() and strlcat() take the full size of the buffer (not just the
			length) and guar-
	antee to NUL-terminate the result (as long as size is larger than
			0 or, in the case of strlcat(), as long as there is at least one
			byte free in dst).  Note
	that a byte for the NUL should be included in size.  Also
	note that strlcpy() and strlcat() only operate on true ``C''
	strings.  This means that for
strlcpy() src must be NUL-terminated and for strlcat()
	both src and dst must be NUL-terminated.

	The strlcpy() function copies up to size - 1
	characters from the NUL-terminated string src to
	dst, NUL-terminating the result.

	The strlcat() function appends the
	NUL-terminated string src to the end of dst.
	It will append at most size - strlen(dst) - 1
	bytes, NUL-terminating the
	result.

	The source and destination strings
	should not overlap, as the behavior
	is undefined.

	• strchr
	DESCRIPTION
	The strchr() function locates the first occurrence of c (converted to a
			char) in the string pointed to by s.  The terminating null character is
	considered to
	be part of the string; therefore if c is `\0', the functions locate
	the terminating `\0'.

	The strrchr() function is identical to strchr(), except it
	locates the last occurrence of c.

	RETURN VALUES
	The functions strchr() and strrchr() return a pointer to the
	located character, or NULL if the character does not appear
	in the string.

	• strrchr
	Voir ci dessus

	• strstr
DESCRIPTION
     The strstr() function locates the first occurrence of the null-terminated
	 string s2 in the null-terminated string s1.

	      The strcasestr() function is similar to strstr(), but ignores the case
		  of both strings.

		       The strnstr() function locates the first occurrence of the
			   null-terminated string s2 in the string s1, where not more than n
			   characters are searched.  Char-
			        acters that appear after a `\0' character are not searched.
					Since the strnstr() function is a FreeBSD specific API, it
					should only be used when portability
					     is not a concern.

						      While the strcasestr() function uses the current
							  locale, the strcasestr_l() function may be passed
							  a locale directly. See xlocale(3) for more
							  information.

							  RETURN VALUES
							       If s2 is an empty string, s1 is returned; if
								   s2 occurs nowhere in s1, NULL is returned;
								   otherwise a pointer to the first character of
								   the first occurrence of
								        s2 is returned.

	• strnstr
Voir ci dessus

	• strcmp
DESCRIPTION
     The strcmp() and strncmp() functions lexicographically compare the
	 null-terminated strings s1 and s2.

	      The strncmp() function compares not more than n characters.  Because
		  strncmp() is designed for comparing strings rather than binary data,
		  characters that
		       appear after a `\0' character are not compared.

			   RETURN VALUES
			        The strcmp() and strncmp() functions return an integer
					greater than, equal to, or less than 0, according as the
					string s1 is greater than, equal to, or less
					     than the string s2.  The comparison is done using
						 unsigned characters, so that `\200' is greater than
						 `\0'.

	• strncmp
Voir qu dessus

	• atoi
DESCRIPTION
     The atoi() function converts the initial portion of the string pointed to
	 by str to int representation.

	      It is equivalent to:

		             (int)strtol(str, (char **)NULL, 10);

					      While the atoi() function uses the current locale, the
						  atoi_l() function may be passed a locale directly. See
						  xlocale(3) for more information.



	• isalpha
DESCRIPTION
     The isalpha() function tests for any character for which isupper(3) or
	 islower(3) is true.  The value of the argument must be representable as an
	 unsigned
	      char or the value of EOF.

		       In the ASCII character set, this includes the following
			   characters (preceded by their numeric values, in octal):
RETURN VALUES
     The isalpha() function returns zero if the character tests false and
	 returns non-zero if the character tests true.

	• isdigit
DESCRIPTION
The isdigit() function tests for a decimal digit character.  Regardless of
locale, this includes the following characters only:

``0''         ``1''         ``2''         ``3''         ``4''
``5''         ``6''         ``7''         ``8''         ``9''

The isnumber() function behaves similarly to isdigit(), but
may recognize additional characters, depending on the
current locale setting.

The value of the argument must be representable as an
unsigned char or the value of EOF.

RETURN VALUES
The isdigit() and isnumber() functions return zero
if the character tests false and return non-zero
if the character tests true.

	• isalnum
DESCRIPTION
     The isalnum() function tests for any character for which isalpha(3) or
	 isdigit(3) is true.  The value of the argument must be representable as an
	 unsigned
	      char or the value of EOF.

		       In the ASCII character set, this includes the following
			   characters (preceded by their numeric values, in octal):
RETURN VALUES
     The isalnum() function returns zero if the character tests false and
	 returns non-zero if the character tests true.

	• isascii
DESCRIPTION
     The isascii() function tests for an ASCII character, which is any character
	 between 0 and octal 0177 inclusive.

	• isprint
DESCRIPTION
	The isprint() function tests for any printing character, including space (`
			').  The value of the argument must be representable as an unsigned char or the	value of EOF.
RETURN VALUES
	 The isprint() function returns zero if the character tests false
	 and returns non-zero if the character tests true.

	 • toupper
DESCRIPTION
	 The toupper() function converts a lower-case letter to the corresponding
	 upper-case letter.  The argument must be representable as an unsigned char
	 or the
	 value of EOF.

	 Although the toupper() function uses the current locale, the
	 toupper_l() function may be passed a locale directly. See
	 xlocale(3) for more information.

RETURN VALUES
If the argument is a lower-case letter, the toupper()
	function returns the corresponding upper-case letter if
	there is one; otherwise, the argument is
	returned unchanged.

	• tolower
DESCRIPTION
	The tolower() function converts an upper-case letter to the corresponding
	lower-case letter.  The argument must be representable as an unsigned char
	or the
	value of EOF.

	Although the tolower() function uses the current locale, the
	tolower_l() function may be passed a locale directly. See
	xlocale(3) for more information.

RETURN VALUES
	If the argument is an upper-case letter, the tolower()
	function returns the corresponding lower-case letter if
	there is one; otherwise, the argument is
	returned unchanged.
